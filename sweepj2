#!/usr/bin/env python
import argparse
import os
import yaml
import re
import itertools

parser = argparse.ArgumentParser()
parser.add_argument(
    '--template',
    help='Jinja2 template file to use for the parameter sweep.',
    required=True
)
parser.add_argument(
    '--space',
    help='Path to YAML file defining the parameter space.',
    required=True
)
parser.add_argument(
    '--output',
    help='Path to YAML file defining the parameter space.',
    default='./sweepj2-output',
    required=False
)

args = vars(parser.parse_args())

if not os.path.exists(args['output']):
    os.makedirs(args['output'])

ext = os.path.splitext(args['template'])[1]
with open(args['template']) as temp:
    template = temp.read()
    print(template)

with open(args['space']) as f:
    dataMap = yaml.safe_load(f)

params = re.findall(r'(?<={__).*?(?=__})', template)
print(set(params))
params = list(set(params))
params.sort()
new_params = list(map(lambda x: "__" + x + "__", params))

kw = {}
vals = []
for k, v in sorted(dataMap.items()):
    vals.append(v)
count = 0
for comb in itertools.product(*vals):
    count += 1
    for tup in zip(new_params, comb):
        kw[tup[0]] = tup[1]
    outfile = "{}".format(comb).replace(', ', '-').replace('(', '').replace(')', '')
    outfile = "{}/{}-{}{}". format(args['output'], str(count).zfill(3), outfile, ext)
    print(outfile)
    print(template.format(**kw))
    with open(outfile, 'w') as f:
        f.write(template.format(**kw))
